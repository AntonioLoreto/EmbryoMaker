#!/bin/bash
#HC 10-9-2020 This bash was originally written by Hugo Cano and it:
#AL 10-9-2024 the script has been modified by Antonio Loreto. 

# Function to check if a file exists and handle error
check_file_exists() {
    local file=$1
    if [ ! -f "$file" ]; then
        echo "[ERROR] File $file not found!" >&2
        return 1
    fi
    return 0
}

# Function to handle mutation
perform_mutation() {
    timeout 3000 "$muta" "$individual" "$parfile" "$rang" || true
}

# Function to run development step
run_development() {
    start_time=$(date +%s.%N)  # Capture start time
    timeout 300000 "$exe" "$individual" 1 "$runtime" 1 || true
    end_time=$(date +%s.%N)  # Capture end time
    execution_time=$(echo "$end_time - $start_time" | bc)
    echo "$execution_time" > development_time.dat
    #echo "$execution_time" >> test-development_time.dat
}

# Function to calculate fitness
calculate_fitness() {
    timeout 5000 "$fit" $one "$parfile" "$rang" || true
}

# Function to calculate robustness
calculate_robustness() {
    #echo "RUNNING ROBUSTNESS"
    timeout 3000 "$robust" $one || true
    check_file_exists "$robval" || echo "NC" > "$robval"
}

# Function to do recombination
recombination() {
    #echo "RUNNING RECOMBINATION"
    timeout 600 "$rec1" "$recombinant" || true
    timeout 600 "$rec2" "$individual" || true
    echo "recombinaciÃ³, ergo, desenvolupament" > "$rundevelop"
    echo "-1" > "$mutacode"
    echo "8    0    0    0    0    1    0    0" >> "$mutacode"
}

# Main script begins here
set -e  # Exit immediately if a command exits with a non-zero status

#Arguments
childdir=$1
bindir=$2
runtime=$3
ind=$4

exe=${bindir}/EMaker
muta=${bindir}/muta_AL.e
fit=${bindir}/fit.e
robust=${bindir}/robust.e
rang=${bindir}/ranges.dat

rec1=${bindir}/rec1.e             #AL 13-2-25
rec2=${bindir}/rec2.e             #AL 13-2-25

inviable=${childdir}/inviable.e
one=${childdir}/individual.dat*.dat                 #HC 17-11-2020 #AL 11-4-24 this is file of developed morphology
filtered=${childdir}/individual.datfitness
start=${childdir}/start.dat
OPCval=${childdir}/OPC.val
robval=${childdir}/rob.val
parfile=${childdir}/evaparams.dat
rundevelop=${childdir}/rundevelopment.txt           #AL 11-4-24 If this file exist the EMaker I.C. gets developed.
assympautxt=${childdir}/dev_assy.txt              #AL 9-7-24 This file is generated in EMaker if filter fuffi(11)=3, it has periodical assymetry mesurements. It gets deleted after running development. 
recombinant=${childdir}/recombination_donor.dat
individual=${childdir}/individual.dat
mutacode=${childdir}/mutacode.dat                   #AL 27-11-24 
logerror=${childdir}/individual.dat.log             #AL 4-2-25

finished=${bindir}/finished
allfin=${finished}/allfin.dat
finish=${finished}/"finish$ind.dat"
START=$(date +%s.%N)

cd "$childdir"
time_with_seconds=$(date +%T)

# Loop until allfin is created, which happens when we have runned the number of max substitutions
while [ ! -f "$allfin" ]; do
    
    if [ -f "$start" ]; then
       
        rm "$start"

        if [ -f "$assympautxt" ]; then
        
            rm "$assympautxt"               #AL 9-7-24 this generated by overloaded fuffi. #AL 12-11-24: this should be different,  FIX!!
        
        fi

        sleep 5                             #AL 9-7-24 this helps to avoid buttleneck at subs.sh
        
        if [ -f "$recombinant" ]; then 
        
            recombination
        
        else
            
            perform_mutation
        
        fi

        # Check if individual is viable and run development
        if [ ! -f "$inviable" ]; then
            
            if [ -f "$rundevelop" ]; then
            
                rm "$rundevelop"
                run_development

                # Calculate Fitness and Robustness
                if [ ! -f "$filtered" ] && [ ! -f "$logerror" ]; then             #HC 26-11-2020 Check if the individual was filtered by EMaker or nonmutated 
            
                    if [ ! -f $one ]; then                                        #AL 12-11-24: this means there is no developed morphology file. The variable $one must be without doble quotes because of wildcard usage (took me a lot to realize)
            
                        echo "100000" > individual.datfitness
                        echo "NOD" > individual.volume.txt
                        echo "Estas aqui porque no se guardÃ³ fichero despues del desarrollo $one" >> desarrolloproblem.dat
                        cp "$childdir"individual.dat "$childdir"individual.err
            
                    else
                        
                        calculate_fitness
                        calculate_robustness
                        paste rob.val individual.datfitness -d " " > assynfit.txt   #AL 16-4-24
            
                    fi
                else
            
                    echo "100000" > individual.datfitness                             #HC 26-11-2020
                    echo "LTLD" > individual.volume.txt
                    echo "Estas aqui porque se filtro durante el desarrollo" >> filtrado.dat
                    
                    if [ -f "$logerror" ]; then 
            
                        rm "$logerror"
            
                    fi
            
                fi
            
            else
            
                # Inherit Fitness & Robustness                                      #AL 16-4-24
                awk '{print $1}' assynfit.txt > "$robval"                           #AL 16-4-24 first column of assynfit is assymetry
                awk '{print $2}' assynfit.txt > individual.datfitness               #AL 16-4-24 second column is fitness
                echo "0.0d0" > development_time.dat
                echo "INHERITANCE" > individual.dat*dat
                echo "0.0d0" > individual.volume.txt
            
            fi
        
        else
        
            echo "This individual is inviable"
            echo "100000" > individual.datfitness
            echo "INVMU" > individual.volume.txt
        
        fi

        check_file_exists "$robval" || echo "NC" > "$robval"
        #check_file_exists "$filtered" || echo "0.0d0" > individual.datfitness
        check_file_exists "individual.volume.txt" || echo "NC" > individual.volume.txt
        check_file_exists "development_time.dat" || echo "NC" > development_time.dat

        echo "$ind" > "$finish"                                                    #HC 26-11-2020 this creates the signal file for subs.sh to substitute this individual
        START=$(date +%s.%N)
    
    else
    
        END=$(date +%s.%N)
        DIFF=$(echo "$END - $START" | bc)
        echo "$DIFF" > time_idle.dat
        sleep 3
    
    fi

done

echo "You can start" > start.dat
